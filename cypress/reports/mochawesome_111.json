{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-04T17:57:13.517Z",
    "end": "2025-03-04T17:59:10.831Z",
    "duration": 117314,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "03b79c02-8f00-49d6-b7ef-4228dca963c4",
      "title": "",
      "fullFile": "cypress/e2e/Standalones/FO/homePageSearchBarValidation.js",
      "file": "cypress/e2e/Standalones/FO/homePageSearchBarValidation.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "74dcf502-99aa-40fd-9bb9-9920abb1c0c0",
          "title": "Testing home page search bar queries",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Search for search queries and expect no HTTP errors",
              "fullTitle": "Testing home page search bar queries Search for search queries and expect no HTTP errors",
              "timedOut": null,
              "duration": 117245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/homePageSearchBarValidation.js.mp4\"",
              "code": "cy.fixture('stores').then(stores => {\n  stores.forEach(store => {\n    // Define search queries array\n    let searchQueries = ['bleu', 'LBO', 'batman', 'nike', 'ike', 'N-ke', 'WhatTHEheck323232', 'ttttt----'];\n    // Iterate over each element of the priceRange && productListing arrays\n    searchQueries.forEach(query => {\n      cy.visit(store, {\n        failOnStatusCode: false\n      }, {\n        responseTimeout: 10000\n      }, {\n        followRedirect: true\n      });\n      const textToType = `${query}`;\n      // Make sure algolia.net is called\n      cy.validateElement('[role=\"combobox\"] > input').detachedDomElement('[role=\"combobox\"] > input').clear({\n        force: true\n      }).detachedDomElement('[role=\"combobox\"] > input').click({\n        force: true\n      }).then($input => {\n        Cypress._.each(textToType.split(''), char => {\n          cy.wrap($input).type(char, {\n            delay: 200\n          });\n        });\n      }).waitForFullyLoad(store);\n      // Check if there are any captured interceptions\n      let capturedInterceptions = [];\n      cy.wait(2000).then(() => {\n        if (Array.isArray(capturedInterceptions) && capturedInterceptions.length > 0) {\n          capturedInterceptions.forEach(interception => {\n            expect(interception.response.statusCode).to.be.oneOf([200, 302]);\n          });\n        } else {\n          cy.log(\"No interceptions were captured within the specified timeout.\");\n        }\n      });\n      // Make an HTTP request to the search URL && check the response status code\n      cy.request('GET', `/search/${query}`).then(response => {\n        expect(response.status).to.not.be.oneOf([400, 404, 500, 503]);\n      }).wait(1000);\n    });\n  });\n});",
              "err": {},
              "uuid": "a4ac14e9-6c1e-4da8-90dc-8eede51f2c0b",
              "parentUUID": "74dcf502-99aa-40fd-9bb9-9920abb1c0c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4ac14e9-6c1e-4da8-90dc-8eede51f2c0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 117245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true,
        "charts": true,
        "reportPageTitle": "Cypress Nuxt Front : Report",
        "inlineAssets": true
      },
      "version": "6.2.0"
    }
  }
}