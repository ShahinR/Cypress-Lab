{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-05T15:05:29.082Z",
    "end": "2025-05-05T15:05:55.738Z",
    "duration": 26656,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e989a6ed-c8f7-4ae6-b882-475072aa3441",
      "title": "",
      "fullFile": "cypress/e2e/Standalones/FO/validateBrandsPage.js",
      "file": "cypress/e2e/Standalones/FO/validateBrandsPage.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7e7b72a9-16f7-4c6e-a024-d1802a3e4228",
          "title": "Call LBO front-office home page and get the main menu for",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go to the brands page on macbook-15",
              "fullTitle": "Call LBO front-office home page and get the main menu for Go to the brands page on macbook-15",
              "timedOut": null,
              "duration": 26605,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/validateBrandsPage.js.mp4\"",
              "code": "cy.fixture('stores').then(stores => {\n  stores.forEach(store => {\n    // Home page main-menu anchor links for health check\n    cy.visit(store, {\n      failOnStatusCode: false\n    }, {\n      responseTimeout: 10000\n    }, {\n      followRedirect: true\n    });\n    cy.acceptCookies();\n    cy.validateElement('[data-cy=\"main-menu-child-elements\"]');\n    cy.get(\"a\").each($a => {\n      const message = $a.text();\n      expect($a, message).to.have.attr(\"href\").not.contain(\"undefined\");\n    });\n    // Retrieve href/anchor values based on the chosen store\n    cy.url().then(url => {\n      cy.fixture('shippingInfo.json').then(shippingInfo => {\n        let listingSelector, brandUrl, brandUrlRegex;\n        if (url.includes(shippingInfo.FRANCE.storeUrl)) {\n          listingSelector = 'a[href=\"/marques\"]';\n          brandUrl = shippingInfo.FRANCE.protocol + shippingInfo.FRANCE.storeUrl + '/marques';\n          brandUrlRegex = /marques/;\n        } else if (url.includes(shippingInfo.SPAIN.storeUrl)) {\n          listingSelector = 'a[href=\"/marcas\"]';\n          brandUrl = shippingInfo.SPAIN.protocol + shippingInfo.SPAIN.storeUrl + '/marcas';\n          brandUrlRegex = /marcas/;\n        } else if (url.includes(shippingInfo.ITALY.storeUrl)) {\n          listingSelector = 'a[href=\"/marche\"]';\n          brandUrl = shippingInfo.ITALY.protocol + shippingInfo.ITALY.storeUrl + '/marche';\n          brandUrlRegex = /marche/;\n        } else {\n          throw new Error('Invalid store URL');\n        }\n        // Randomly open a brand\n        cy.validateElement(listingSelector).get(listingSelector).invoke('attr', 'href').then(href => {\n          cy.visit(brandUrl, {\n            failOnStatusCode: false,\n            responseTimeout: 10000,\n            followRedirect: true\n          });\n          cy.url().should('match', brandUrlRegex);\n          openRandomBrand();\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "53210683-8b67-4365-b0de-737c29ba403c",
              "parentUUID": "7e7b72a9-16f7-4c6e-a024-d1802a3e4228",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53210683-8b67-4365-b0de-737c29ba403c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26605,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true,
        "charts": true,
        "reportPageTitle": "Cypress Nuxt Front : Report",
        "inlineAssets": true
      },
      "version": "6.2.0"
    }
  }
}