{
  "stats": {
    "suites": 7,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-14T07:37:40.306Z",
    "end": "2025-04-14T07:44:48.762Z",
    "duration": 428456,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5162e5a8-363b-4e23-9179-ee32137e0dbc",
      "title": "",
      "fullFile": "cypress/e2e/Scenarios/runCustomerReturnOrderPartiallyWithFullRefund.js",
      "file": "cypress/e2e/Scenarios/runCustomerReturnOrderPartiallyWithFullRefund.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "68e01fbd-6b51-4040-b1ff-2f9b61813e09",
          "title": "addNewAccount.js: call LBO front-office subscription form, env de test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add a new subscription (client) process on macbook-15",
              "fullTitle": "addNewAccount.js: call LBO front-office subscription form, env de test Add a new subscription (client) process on macbook-15",
              "timedOut": null,
              "duration": 50071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "cy.fixture('stores').then(stores => {\n  stores.forEach(store => {\n    cy.visit(store);\n    cy.acceptCookies();\n    cy.visit(`${store}/login?mode=connection`, {\n      failOnStatusCode: false\n    });\n    cy.validateElement('[data-cy=customer-registration]').wait(2000);\n    cy.get('[data-cy=customer-registration]').click({\n      force: true\n    });\n    cy.url().should('contain', 'login?mode=connection');\n    // Customer registration\n    cy.acceptCookies();\n    cy.customInfo();\n    // Confirm subscription\n    cy.validateElement('[data-cy=submit] > .c-btn');\n    cy.get('[data-cy=submit] > .c-btn').click({\n      force: true\n    });\n    cy.wait(3000); /* TO KEEP FOR CI TESTS */\n    cy.validateElement('.c-form-message');\n  });\n});",
              "err": {},
              "uuid": "e66731c6-5fb0-456c-9c26-db7378d1c67f",
              "parentUUID": "68e01fbd-6b51-4040-b1ff-2f9b61813e09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e66731c6-5fb0-456c-9c26-db7378d1c67f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 50071,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2880f8e3-86a5-480a-9bda-de17804bd5b8",
          "title": "This test will validate hipay frictionless checkout process for https://www.preprod.laboutiqueofficielle.com",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go to products listing with a price higher than 100 euros on macbook-15",
              "fullTitle": "This test will validate hipay frictionless checkout process for https://www.preprod.laboutiqueofficielle.com Go to products listing with a price higher than 100 euros on macbook-15",
              "timedOut": null,
              "duration": 112979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Checkout process\ncy.addShippingAddress();\ncy.acceptCookies();\nfor (let i = 0; i < 2; i++) {\n  cy.addProductToBasket();\n  cy.productSizer();\n}\n// Promotion code block\ncy.get('body').scrollIntoView({\n  offset: {\n    top: 0,\n    left: 0\n  }\n});\ncy.get('[data-cy=basket-link]').scrollIntoView().click({\n  force: true\n});\ncy.url().should('include', '/checkout/basket');\ncy.validateElement('.c-shopping-cart-promo-code__toggle > button');\ncy.get('.c-shopping-cart-promo-code__toggle > button').click({\n  force: true\n});\ncy.validateElement('#default');\ncy.get('#default').click({\n  force: true\n}).clear();\ncy.get('#default').click({\n  force: true\n}).type(Cypress.env('defaultPromoCode'));\ncy.validateElement('.c-btn.c-btn--accent.c-btn--small');\ncy.get('.c-btn.c-btn--accent.c-btn--small').click({\n  force: true\n});\ncy.wait(4000); /* TO KEEP FOR CI TESTS */\n// Make sure the promotion code is applied successfully\ncy.get('body').then(shipping => {\n  const promoCodeAppliedSuccessfully = shipping.find('.c-shopping-cart-promo').length > 0;\n  switch (true) {\n    case promoCodeAppliedSuccessfully:\n      cy.validateElement('.c-shopping-cart-promo');\n      console.log('Promotion code is applied successfully');\n      break;\n    default:\n      throw new Error('Promotion code is not applied successfully, please check your logs...');\n  }\n});\n// API calls capture\ncy.intercept({\n  method: 'GET',\n  url: '**/v4/secure/checkout/payments/available/**'\n}).as('basketDataValidation');\ncy.intercept({\n  method: 'POST',\n  url: 'https://stage-data.hipay.com/checkout-data'\n}).as('hipayDataValidation');\n// Continue with the checkout process\ncy.validateElement('[data-cy=validate-basket]').get('[data-cy=\"validate-basket\"]').first().click({\n  force: true\n});\ncy.selectShippingMethod();\n// Credit card payment and purchase validation\ncy.frictionlessCreditCardPayment();\ncy.wait(4000); /* TO KEEP FOR CI TESTS */\ncy.validateElement('.c-confirm__header', {\n  timeout: 20000\n}).validateElement('.c-confirm__title').validateElement('.c-confirm__subtitle').validateElement('.c-confirm-shipping');\ncy.visit(url + '/account/history');\ncy.get(':nth-child(1) > .c-order-item', {\n  timeout: 20000\n}).should('have.length.gt', 0);",
              "err": {},
              "uuid": "8b03b434-bac3-4495-8e98-9aeb0e93f53c",
              "parentUUID": "2880f8e3-86a5-480a-9bda-de17804bd5b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b03b434-bac3-4495-8e98-9aeb0e93f53c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 112979,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "06a96777-5dc3-4e97-87a4-ac07c77f524d",
          "title": "This test will validate hipay frictionless checkout process for https://www.preprod.ryses.es",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go to products listing with a price higher than 100 euros on macbook-15",
              "fullTitle": "This test will validate hipay frictionless checkout process for https://www.preprod.ryses.es Go to products listing with a price higher than 100 euros on macbook-15",
              "timedOut": null,
              "duration": 127557,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Checkout process\ncy.addShippingAddress();\ncy.acceptCookies();\nfor (let i = 0; i < 2; i++) {\n  cy.addProductToBasket();\n  cy.productSizer();\n}\n// Promotion code block\ncy.get('body').scrollIntoView({\n  offset: {\n    top: 0,\n    left: 0\n  }\n});\ncy.get('[data-cy=basket-link]').scrollIntoView().click({\n  force: true\n});\ncy.url().should('include', '/checkout/basket');\ncy.validateElement('.c-shopping-cart-promo-code__toggle > button');\ncy.get('.c-shopping-cart-promo-code__toggle > button').click({\n  force: true\n});\ncy.validateElement('#default');\ncy.get('#default').click({\n  force: true\n}).clear();\ncy.get('#default').click({\n  force: true\n}).type(Cypress.env('defaultPromoCode'));\ncy.validateElement('.c-btn.c-btn--accent.c-btn--small');\ncy.get('.c-btn.c-btn--accent.c-btn--small').click({\n  force: true\n});\ncy.wait(4000); /* TO KEEP FOR CI TESTS */\n// Make sure the promotion code is applied successfully\ncy.get('body').then(shipping => {\n  const promoCodeAppliedSuccessfully = shipping.find('.c-shopping-cart-promo').length > 0;\n  switch (true) {\n    case promoCodeAppliedSuccessfully:\n      cy.validateElement('.c-shopping-cart-promo');\n      console.log('Promotion code is applied successfully');\n      break;\n    default:\n      throw new Error('Promotion code is not applied successfully, please check your logs...');\n  }\n});\n// API calls capture\ncy.intercept({\n  method: 'GET',\n  url: '**/v4/secure/checkout/payments/available/**'\n}).as('basketDataValidation');\ncy.intercept({\n  method: 'POST',\n  url: 'https://stage-data.hipay.com/checkout-data'\n}).as('hipayDataValidation');\n// Continue with the checkout process\ncy.validateElement('[data-cy=validate-basket]').get('[data-cy=\"validate-basket\"]').first().click({\n  force: true\n});\ncy.selectShippingMethod();\n// Credit card payment and purchase validation\ncy.frictionlessCreditCardPayment();\ncy.wait(4000); /* TO KEEP FOR CI TESTS */\ncy.validateElement('.c-confirm__header', {\n  timeout: 20000\n}).validateElement('.c-confirm__title').validateElement('.c-confirm__subtitle').validateElement('.c-confirm-shipping');\ncy.visit(url + '/account/history');\ncy.get(':nth-child(1) > .c-order-item', {\n  timeout: 20000\n}).should('have.length.gt', 0);",
              "err": {},
              "uuid": "0df47307-23ea-4f73-b34d-82b8d735dd90",
              "parentUUID": "06a96777-5dc3-4e97-87a4-ac07c77f524d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0df47307-23ea-4f73-b34d-82b8d735dd90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127557,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0273765-fc86-4141-b75a-9d4f50220ff0",
          "title": "Order shippment process simulation (DBMS)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Call the pre-production DBMS and execute the necessary SQL commands",
              "fullTitle": "Order shippment process simulation (DBMS) Call the pre-production DBMS and execute the necessary SQL commands",
              "timedOut": null,
              "duration": 2158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Retrive the client's orderId from DBMS\nconst getClientOrderId = cy.task(\"queryDb\", `select c2.commande_id from lbov4.commande c2 where c2.client_email = '${this.data.custom_email}' order by c2.commande_date_ajout`).then(Indexcount => {\n  // Extract all linked orderIDs this user\n  const orderIds = Indexcount.map(record => record[\"commande_id\"]);\n  // Log the resulting array for further debugging aspects\n  cy.log(`Retrieved order IDs: ${orderIds.join(\", \")}`);\n  // Loop through each orderID\n  orderIds.forEach(orderId => {\n    const updateInvoiceTable = cy.task(\"queryDb\", `INSERT INTO lbov4.facture(commande_id, date) VALUES ('${orderId}', NOW())`).then(() => {\n      cy.task(\"queryDb\", `SELECT * FROM facture WHERE commande_id = '${orderId}'`).then(result => {\n        expect(result.length).to.be.greaterThan(0);\n        expect(result[0].commande_id).to.eq(orderId);\n      });\n    });\n    // Apply necessaire order data modifications\n    const updateOrderTable = cy.task(\"queryDb\", `UPDATE lbov4.commande c\n          LEFT JOIN lbov4.commande_produit cp ON lbov4.c.commande_id = lbov4.cp.commande_id\n          LEFT JOIN lbov4.commande_produit_attribut cpa ON lbov4.cp.commande_produit_id = lbov4.cpa.commande_produit_id\n        SET lbov4.c.commande_statut_id = 4,\n            c.commande_facture_numero = (SELECT MAX(facture_id) FROM lbov4.facture),\n            lbov4.c.commande_facture_date = CURDATE(),\n            lbov4.cp.quantity_prepared = lbov4.cp.produit_quantite,\n            lbov4.cpa.quantity_prepared = lbov4.cpa.produit_option_valeur_quantite,\n            lbov4.c.commande_livraison_colis = '6A16163204582',\n            lbov4.c.last_tracking_status = 'DELIVERED',\n            lbov4.c.last_tracking_date = CURDATE()\n        WHERE lbov4.c.commande_id = '${orderId}'`).then(() => {\n      cy.task(\"queryDb\", `SELECT * FROM commande WHERE commande_id = '${orderIds}'`).then(result => {\n        expect(result).to.have.lengthOf(1);\n        expect(result[0].commande_statut_id).to.equal(4);\n        expect(result[0].commande_livraison_colis).to.equal(\"6A16163204582\");\n        expect(result[0].last_tracking_status).to.equal(\"DELIVERED\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "17e85d16-86e5-4244-8885-f38aa337d848",
              "parentUUID": "a0273765-fc86-4141-b75a-9d4f50220ff0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17e85d16-86e5-4244-8885-f38aa337d848"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "78514b47-cae5-475b-866f-b17bc20b625d",
          "title": "Customer order return process https://www.preprod.laboutiqueofficielle.com",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Customer return her/his order",
              "fullTitle": "Customer order return process https://www.preprod.laboutiqueofficielle.com Customer return her/his order",
              "timedOut": null,
              "duration": 31832,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Access the order details to process the return\ncy.visit(url + '/account', {\n  failOnStatusCode: false\n}, {\n  responseTimeout: 10000\n}, {\n  followRedirect: true\n});\ncy.validateElement('a[href=\"/account/history\"]');\ncy.get('a[href=\"/account/history\"]').eq(0).click({\n  force: true\n});\ncy.url().should('contain', '/account/history');\n// Retrieve the client's orderId from DBMS\nconst getClientOrderId = cy.task(\"queryDb\", `select c2.commande_id from lbov4.commande c2 where c2.client_email = '${this.data.custom_email}' order by c2.commande_date_ajout`).then(Indexcount => {\n  // Extract all linked orderIDs to this user\n  const orderIds = Indexcount.map(record => record['commande_id']);\n  // Optimize order DOM element retrieval for faster processing\n  const orderItemActionClass = '.c-order-item__action';\n  const orderItemShowClass = '.c-order-item__show';\n  const orderDetailLinkClass = '.c-order-detail__link';\n  // Use Cypress native visibility && click function\n  const clickOnOrderElement = element => {\n    cy.get(element).should('be.visible').click({\n      force: true\n    });\n  };\n  cy.get(orderItemActionClass).then(orderReturnActions => {\n    clickOnOrderElement(orderItemShowClass);\n    clickOnOrderElement(orderDetailLinkClass);\n  });\n  // Perform URL assertion testing to ensure inclusion of at least one orderId  \n  cy.url().as('url');\n  cy.get('@url').should(url => {\n    const isOneOfOrderIdsPresent = orderIds.some(id => url.includes(`/account/history/${id}/product-return-detail`));\n    expect(isOneOfOrderIdsPresent).to.be.true;\n  });\n  // Proceed to order return workflow\n  cy.customerOrderReturn.acceptReturnConditions();\n  cy.validateElement('.c-order-return__product > .c-checkbox > label');\n  cy.get('.c-order-return__product > .c-checkbox > label').eq(0).then(ProductToReturn => {\n    if (ProductToReturn.length > 0) {\n      cy.get('.c-order-return__product > .c-checkbox > label').eq(0).click({\n        force: true\n      });\n    } else {\n      throw new Error(\"No checkboxes found, something went wrong with this refund request, check your logs.\");\n    }\n  });\n  cy.fixture('shippingInfo.json').then(shippingInfo => {\n    cy.get('select[data-v-0326f989]').then($els => {\n      expect($els).to.have.length.of.at.least(1);\n      if ($els.eq(1).length) {\n        cy.wrap($els.eq(1)).select('2').should('have.value', '2');\n      } else if ($els.eq(0).length) {\n        cy.wrap($els.eq(0)).select('2').should('have.value', '2');\n      }\n    });\n  });\n  cy.validateElement('[id^=\"message-\"]');\n  cy.get('[id^=\"message-\"]').clear().type('This test is automated');\n  cy.validateElement('.c-order-return__notice');\n  // Submit the request\n  cy.wait(4000); /* TO KEEP FOR CI TESTS */\n  cy.validateElement('form > .c-btn');\n  cy.get('form > .c-btn').click({\n    force: true\n  });\n  cy.validateElement('.c-order-return__modal');\n  cy.validateElement('.c-btn--link');\n  cy.get('.c-btn--link').click({\n    force: true\n  });\n  // Make sure the right URL's end-point has been called\n  cy.url().as('url');\n  cy.get('@url').should(url => {\n    const isOneOfOrderIdsPresent = orderIds.some(id => url.includes(`/account/history/${id}/product-return-detail`));\n    expect(isOneOfOrderIdsPresent).to.be.true;\n  });\n  // Returned body health check\n  cy.validateElement('.c-return-validate');\n  cy.validateElement('.c-return-validate__summary-title');\n  cy.validateElement('.c-return-validate__total');\n  cy.validateElement('.c-shipping-product');\n});",
              "err": {},
              "uuid": "eb1093e2-438a-4696-95c7-e16e61b19f6e",
              "parentUUID": "78514b47-cae5-475b-866f-b17bc20b625d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb1093e2-438a-4696-95c7-e16e61b19f6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31832,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7219def1-b0c0-4fc3-96cb-090f01aa8c75",
          "title": "Customer order return process https://www.preprod.ryses.es",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Customer return her/his order",
              "fullTitle": "Customer order return process https://www.preprod.ryses.es Customer return her/his order",
              "timedOut": null,
              "duration": 30758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Access the order details to process the return\ncy.visit(url + '/account', {\n  failOnStatusCode: false\n}, {\n  responseTimeout: 10000\n}, {\n  followRedirect: true\n});\ncy.validateElement('a[href=\"/account/history\"]');\ncy.get('a[href=\"/account/history\"]').eq(0).click({\n  force: true\n});\ncy.url().should('contain', '/account/history');\n// Retrieve the client's orderId from DBMS\nconst getClientOrderId = cy.task(\"queryDb\", `select c2.commande_id from lbov4.commande c2 where c2.client_email = '${this.data.custom_email}' order by c2.commande_date_ajout`).then(Indexcount => {\n  // Extract all linked orderIDs to this user\n  const orderIds = Indexcount.map(record => record['commande_id']);\n  // Optimize order DOM element retrieval for faster processing\n  const orderItemActionClass = '.c-order-item__action';\n  const orderItemShowClass = '.c-order-item__show';\n  const orderDetailLinkClass = '.c-order-detail__link';\n  // Use Cypress native visibility && click function\n  const clickOnOrderElement = element => {\n    cy.get(element).should('be.visible').click({\n      force: true\n    });\n  };\n  cy.get(orderItemActionClass).then(orderReturnActions => {\n    clickOnOrderElement(orderItemShowClass);\n    clickOnOrderElement(orderDetailLinkClass);\n  });\n  // Perform URL assertion testing to ensure inclusion of at least one orderId  \n  cy.url().as('url');\n  cy.get('@url').should(url => {\n    const isOneOfOrderIdsPresent = orderIds.some(id => url.includes(`/account/history/${id}/product-return-detail`));\n    expect(isOneOfOrderIdsPresent).to.be.true;\n  });\n  // Proceed to order return workflow\n  cy.customerOrderReturn.acceptReturnConditions();\n  cy.validateElement('.c-order-return__product > .c-checkbox > label');\n  cy.get('.c-order-return__product > .c-checkbox > label').eq(0).then(ProductToReturn => {\n    if (ProductToReturn.length > 0) {\n      cy.get('.c-order-return__product > .c-checkbox > label').eq(0).click({\n        force: true\n      });\n    } else {\n      throw new Error(\"No checkboxes found, something went wrong with this refund request, check your logs.\");\n    }\n  });\n  cy.fixture('shippingInfo.json').then(shippingInfo => {\n    cy.get('select[data-v-0326f989]').then($els => {\n      expect($els).to.have.length.of.at.least(1);\n      if ($els.eq(1).length) {\n        cy.wrap($els.eq(1)).select('2').should('have.value', '2');\n      } else if ($els.eq(0).length) {\n        cy.wrap($els.eq(0)).select('2').should('have.value', '2');\n      }\n    });\n  });\n  cy.validateElement('[id^=\"message-\"]');\n  cy.get('[id^=\"message-\"]').clear().type('This test is automated');\n  cy.validateElement('.c-order-return__notice');\n  // Submit the request\n  cy.wait(4000); /* TO KEEP FOR CI TESTS */\n  cy.validateElement('form > .c-btn');\n  cy.get('form > .c-btn').click({\n    force: true\n  });\n  cy.validateElement('.c-order-return__modal');\n  cy.validateElement('.c-btn--link');\n  cy.get('.c-btn--link').click({\n    force: true\n  });\n  // Make sure the right URL's end-point has been called\n  cy.url().as('url');\n  cy.get('@url').should(url => {\n    const isOneOfOrderIdsPresent = orderIds.some(id => url.includes(`/account/history/${id}/product-return-detail`));\n    expect(isOneOfOrderIdsPresent).to.be.true;\n  });\n  // Returned body health check\n  cy.validateElement('.c-return-validate');\n  cy.validateElement('.c-return-validate__summary-title');\n  cy.validateElement('.c-return-validate__total');\n  cy.validateElement('.c-shipping-product');\n});",
              "err": {},
              "uuid": "a002c91f-3eef-4a60-a179-355f99a507d5",
              "parentUUID": "7219def1-b0c0-4fc3-96cb-090f01aa8c75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a002c91f-3eef-4a60-a179-355f99a507d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30758,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "439f8268-6590-49eb-b7e9-75c3ad1a11b0",
          "title": "Customer returned the order for process validation via BOB",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate order return request",
              "fullTitle": "Customer returned the order for process validation via BOB Validate order return request",
              "timedOut": null,
              "duration": 61413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"../videos/runCustomerReturnOrderPartiallyWithFullRefund.js.mp4\"",
              "code": "// Go to the returns management panel\ncy.loginBOB();\ncy.validateElement('.sidenav-toplevel > :nth-child(2) > :nth-child(1) > .mat-list-item-content');\ncy.get('.sidenav-toplevel > :nth-child(2) > :nth-child(1) > .mat-list-item-content').click({\n  force: true\n});\n// Re-confirm the return request\ncy.validateElement('[class^=sidenav-item-name');\ncy.get('[class^=sidenav-item-name').eq(2).click({\n  force: true\n});\ncy.url().should('contain', '/return-order');\n// Listing health check\ncy.validateElement('lbo-return-order-list > :nth-child(4)');\ncy.validateElement('lbo-return-order-list > :nth-child(6)');\n// Enter the retrived OrderID and search it\ncy.validateElement('#mat-input-3');\nconst getClientOrderId = cy.task(\"queryDb\", `select c2.commande_id from lbov4.commande c2 where c2.client_email = '${this.data.custom_email}' order by c2.commande_date_ajout`).then(Indexcount => {\n  // Extract all linked orderIDs this user\n  const orderIds = Indexcount.map(record => record['commande_id']);\n  // Log the resulting array for further debugging aspects\n  cy.log(`Retrieved order IDs: ${orderIds.join(\", \")}`);\n  // Store unique order IDs in a set\n  const uniqueOrderIds = new Set(orderIds);\n  // Loop through each unique order ID\n  cy.wrap([...uniqueOrderIds]).each(orderId => {\n    // Clear and enter the order ID in the input field\n    cy.get('[id^=\"mat-input\"]').eq(1).clear().type(orderId);\n    // Click the search button\n    cy.get(':nth-child(5) > .mat-raised-button > .mat-button-wrapper').click({\n      force: true\n    });\n    // Make sure the selected order is the one we're looking for\n    cy.wait(3000); /* TO KEEP FOR CI TESTS */\n    cy.validateElement('.mat-row > .cdk-column-order');\n    cy.get('.mat-row > .cdk-column-order', {\n      timeout: 0\n    }).invoke('text').then(text => {\n      const orderIdsArray = text.split(',').map(Number).filter(Number.isInteger);\n      const containsOrderId = orderIdsArray.includes(orderId);\n      expect(containsOrderId).to.be.true;\n      // Make sure the order ID is not used again in the loop\n      const orderIdCount = orderIdsArray.filter(id => id === orderId).length;\n      expect(orderIdCount).to.equal(1);\n    });\n    // Click the row to open the order details\n    cy.validateElement('.mat-row');\n    cy.get('.mat-row').click({\n      force: true\n    });\n    // Wait for the order details to load\n    cy.validateElement('.mat-headline').wait(5000); /* TO KEEP FOR CI TESTS */\n    // Check if the size block exists\n    cy.get('body').then($ele => {\n      if ($ele.find(':nth-child(2) > .mat-raised-button > .mat-button-wrapper').length > 0) {\n        // If the size block exists, validate the elements on the page\n        cy.validateElement('[class^=\"title\"]');\n        cy.validateElement('[class^=\"content-container\"]');\n        cy.validateElement('.sidenav-scrollbar-container');\n        cy.validateElement('.content-container > :nth-child(5) > :nth-child(1)');\n        cy.validateElement('.content-container > :nth-child(5) > :nth-child(2)');\n        cy.validateElement('[class^=\"mat-checkbox-inner-container\"]');\n        cy.validateElement(':nth-child(1) > .mat-raised-button > .mat-button-wrapper');\n        cy.validateElement(':nth-child(2) > .mat-raised-button > .mat-button-wrapper');\n        // Retrieve the orderReturnId from the DBMS\n        const getOrderReturnId = cy.task(\"queryDb\", `select ro.id from lbov4.return_order ro where ro.commande_id = '${orderId}' order by ro.created DESC limit 1`).then(Indexcount => {\n          // Isolate the OrderID (index based)\n          var OrderReturnId = Indexcount[0]['id'];\n          cy.log(OrderReturnId);\n          // Return credit create PATCH call\n          cy.intercept({\n            method: 'POST',\n            url: '**/return_order/' + OrderReturnId + '/credit/create'\n          }).as('returnOrderCreditCreatePOSTCall');\n          // Return validation PATCH call\n          cy.intercept({\n            method: 'PATCH',\n            url: '**/return_order/' + OrderReturnId + '/patch'\n          }).as('returnOrderPATCHCall');\n          // Return validation POST notify call\n          cy.intercept({\n            method: 'POST',\n            url: '**/return_order/' + OrderReturnId + '/notify/refund'\n          }).as('returnOrderNotifyPOSTCall');\n          // Return order payment validation POST call\n          cy.intercept({\n            method: 'POST',\n            url: '**/return_order_payment/create'\n          }).as('returnOrderPOSTCall');\n          // Return order status GET call\n          cy.intercept({\n            method: 'GET',\n            url: '**/return_order/status'\n          }).as('returnOrderStatusGETCall');\n        });\n        // Submit the request\n        cy.get('[class^=mat-checkbox-inner-container');\n        cy.get('[type=\"checkbox\"]').eq(2).check({\n          force: true\n        });\n        cy.get(':nth-child(2) > .mat-raised-button > .mat-button-wrapper').click({\n          force: true\n        });\n        // Validate API caching et response status code ==> wait for response.status to be either 200, 204 or 201  \n        cy.wait('@returnOrderPATCHCall').its('response.statusCode').should('equal', 204);\n        cy.wait('@returnOrderPOSTCall').its('response.statusCode').should('equal', 201);\n        cy.wait('@returnOrderCreditCreatePOSTCall').its('response.statusCode').should('equal', 201);\n      } else {\n        cy.log('This orderID has already been treated');\n        cy.go('back');\n      }\n    });\n  });\n});",
              "err": {},
              "uuid": "883bd2df-81fd-4bc8-bad9-296196407a88",
              "parentUUID": "439f8268-6590-49eb-b7e9-75c3ad1a11b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "883bd2df-81fd-4bc8-bad9-296196407a88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true,
        "charts": true,
        "reportPageTitle": "Cypress Nuxt Front : Report",
        "inlineAssets": true
      },
      "version": "6.2.0"
    }
  }
}